const { Telegraf, Markup, Extra } = require('telegraf');
const fetch = require('node-fetch');
const fs = require('fs');
const bot = new Telegraf("1550579606:AAGi1uGyiUxf2rD67UJYqP39wOEh3TUCswc");


bot.start((context) => {
    context.reply(`–ü—Ä–∏–≤–µ—Ç :), ${context.message.from.first_name}. –Ø –ë–µ–∫—Å–ø–µ–π—Å :>.\n–ß—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å?\n1. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä–æ–ª–µ–π –ø–æ –ø–æ—á—Ç–µ.\n2. –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –ø–∞—Ä–æ–ª–µ–π –ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n3. ÔæêÔΩ¢ÔæëœÑÔøΩ ÔæëÔøΩ ÔæëÔøΩœÉÔΩπ ÔæêÔΩ∑ÔæêÔΩΩÔæêÔΩ∞ÔæêÔΩµÔæëÔøΩ, ÔæëÔøΩ„Å≤ÔΩæ ÔæêÔΩµÔæëÁ¶çÔΩµ ÔæêÔΩ±ÔæëœÉÔΩ¥ÔæêÔΩµÔæëÔøΩ..\n–ù–∞–ø–∏—à–∏ –ª—é–±—É—é –ø–æ—á—Ç—É, –∏ —è –ø—Ä–æ–≤–µ—Ä—é –µ–µ –Ω–∞ —Å–ª–∏—Ç—ã–µ –ø–∞—Ä–æ–ª–∏ ;).`);

});

bot.command('myid', (context) => {
    context.reply(`–¢–≤–æ–π id: ${context.from.id}.\n. –û—Ç–ø—Ä–∞–≤—å —ç—Ç–æ –ø—Ä–æ–¥–∞–≤—Ü—É.`)
}) 

bot.on('text', (context) => {

    let flag = false;

    const results = JSON.parse(fs.readFileSync('permissions.json'));
    results.forEach(element => {
        if (element.id == context.from.id) {
            flag = true;
        }
    });

        if (flag) {
            if (context.message.text.split(' ').length == 2) {
                if (context.message.text.split(' ')[0] == '/username') {
                    fetch(`https://leakcheck.net/api/?key=7f10890d05bf2f5979585d4ab61d637e14618d3b&check=${context.message.text.split(' ')[1]}&type=login`)
                    .then(data => data.json())
                    .then(res => {
                        if (res.success == false) {
                            context.reply(`üîç–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${context.message.text.split(' ')[1]}: –ù–µ –Ω–∞–π–¥–µ–Ω–æ.`)
                        } else {
                            let reply = `üîç–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${context.message.text.split(' ')[1]}:\n`;
                            res.result.forEach(password => {
                                reply += `${password.line} - –ò–∑ —Å–∞–π—Ç–æ–≤: ${password.sources.length == 0 ? "N/A" : password.sources.toString()}\n`;
                            });
                            context.reply(reply);
                        }
                    })
                    .catch(err => {
                        console.log(err);
                    })
                }
            } else {
                fetch(`https://leakcheck.net/api/?key=7f10890d05bf2f5979585d4ab61d637e14618d3b&check=${context.message.text}&type=email`)
                .then(data => data.json())
                .then(res => {
                    if (res.success == false) {
                        context.reply(`üîç–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ ${context.message.text}: –ù–µ –Ω–∞–π–¥–µ–Ω–æ.`)
                    } else {
                        let reply = `üîç–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ä–æ–ª–∏ ${context.message.text}:\n`;
                        res.result.forEach(password => {
                            reply += password.line + "\n";
                        });
                        context.reply(reply);
                    }
                })
                .catch(err => {
                    console.log(err);
                })
            }
        } else {
            context.reply(`–ê —Ö–µ—Ä–∞ —Ç–µ–±–µ :). –ö—É–ø–∏ —Å–Ω–∞—á–∞–ª–∞ –º–µ–Ω—è. /myid –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–¥–∞–≤—Ü—É.`)
        }



})

bot.launch();